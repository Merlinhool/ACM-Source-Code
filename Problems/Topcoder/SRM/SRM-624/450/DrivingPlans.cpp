#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <iostream>
#include <sstream>
#include <set>
#include <queue>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <string>
#include <utility>
#include <map>
#include <ctime>
#include <typeinfo>
#include <stack>

using namespace std;

#define clr(x,y) memset(x, y, sizeof(x))
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define sqr(x) ((x)*(x))
#define unq(x) sort(all(x)),(x).erase(unique(all(x)),(x).end())
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define repf(i, a, b) for(int i = (a); i <= (int)(b); i ++)
#define repd(i, a, b) for(int i = (a); i >= (int)(b); i --)
#define out(x) cout<<#x<<":"<<(x)<<endl
#define tst(x) cout<<x<<" "
#define tst1(a) cout<<#a<<endl
#define CINBEQUICKER std::ios::sync_with_stdio(false)

typedef long long int64;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<double> vd;
typedef pair<int, int> pii;

const double eps = 1e-11;
const double PI = atan(1.0)*4;
const int inf = 2139062143 / 2;
const int mod = 1000000009;

template <class T> void chmin(T &t,T x){if (x < t) t = x;}
template <class T> void chmax(T &t,T x){if (x > t) t = x;}

int sgn(const double &x) {  return (x > eps) - (x < -eps); }

struct cmp{
    bool operator() (const pii &a, const pii &b) const{
        return a > b;
    }
};

class DrivingPlans {
    public:
    bool spe[2005], ans, done[2005];
    int n, d[2005], vis[2005];
    vector<pii > pat[2005];
    int count(int N, vector<int> A, vector<int> B, vector<int> C) {
        n = N;
        clr (spe, 0);
        repf (i, 0, n-1) pat[i].clear();
        repf (i, 0, sz(A)-1){
            int t1 = A[i] - 1, t2 = B[i] - 1;
            pat[t1].pb (mp (t2, C[i])); pat[t2].pb (mp (t1, C[i]));
            if (!C[i]) spe[t1] = 1, spe[t2] = 1;
        }

        dijskra (0);
        //repf (i, 0, n-1) tst (i), out (d[i]);
        //cout << endl;
        ans = 1;
        clr (vis, -1);
        int ret = dfs (n-1, d[n-1]);
        return ans ? ret : -1;
    }
    void dijskra (int sta){
        clr (d, 127); d[sta] = 0;
        priority_queue<pii, vector<pii >, cmp> q; q.push (mp (0, sta));
        clr (done, 0);
        while (sz(q)){
            pii x = q.top(); q.pop();
            int u = x.y;
            if (done[u]) continue;
            done[u] = 1;
            repf (i, 0, sz(pat[u])-1){
                int v = pat[u][i].x, tim = d[u] + pat[u][i].y;
                if (!done[v] && d[v] > tim){
                    d[v] = tim; q.push (mp (tim, v));
                }
            }
        }
    }
    int dfs (int x, int dis){
        if (x == 0) return 1;
        if (vis[x] != -1) return vis[x];
        int &ret = vis[x]; ret = 0;
        repf (i, 0, sz(pat[x])-1){
            int v = pat[x][i].x, tim = pat[x][i].y;
            if (tim + d[v] == dis){
                ret = (dfs (v, d[v]) + ret) % mod;
                if (spe[v]) ans = 0;
            }
            if (!ans) return 0;
        }
        return ret;
    }
};

// CUT begin
// Array to vector converter
template <typename T> vector<T> vector_wrapper(T arr[], int n) { return vector<T>(arr, arr + n); }
#define to_vector(arr) vector_wrapper(arr, sizeof(arr) / sizeof(arr[0]))

template <typename T> string pretty_print(T t) { stringstream s; typeid(T) == typeid(string) ? s << "\"" << t << "\"" : s << t; return s.str(); }

bool do_test(int N, vector<int> A, vector<int> B, vector<int> C, int __expected, int caseNo) {

    time_t startClock = clock();
    DrivingPlans *instance = new DrivingPlans();
    int __result = instance->count(N, A, B, C);
    double elapsed = (double)(clock() - startClock) / CLOCKS_PER_SEC;
    delete instance;

    if (__result == __expected) {
        cout << "  Testcase #" << caseNo << " ... ";
        cout << "PASSED!" << " (" << elapsed << " seconds)" << endl;
        return true;
    }
    else {
        cout << "  Testcase #" << caseNo << " ... ";
        cout << "FAILED!" << " (" << elapsed << " seconds)" << endl;
        cout << "           Expected: " << pretty_print(__expected) << endl;
        cout << "           Received: " << pretty_print(__result) << endl;
        return false;
    }
}



bool run_testcase(int __no) {
    switch (__no) {
        case 0: {
            int N = 100;
            int A[] = 
{51, 61, 54, 34, 82, 33, 96, 43, 8, 58, 97, 78, 20, 5, 6, 75, 67, 89, 57, 16, 28, 6, 38, 25, 33, 78, 98, 70, 80, 90, 35, 90, 24, 62, 41, 27, 4, 63, 85, 60, 4, 61, 44, 45, 23, 30, 56, 12, 67, 81, 42, 30, 98, 45, 2, 86, 76, 60, 53, 89, 72, 32, 75, 55, 36, 34, 95, 50, 46, 27, 17, 40, 95, 43, 88, 99, 83, 32, 53, 31, 26, 62, 52, 49, 49, 32, 92, 74, 49, 74, 52, 39, 9, 28, 73, 86, 50, 96, 75, 100, 53, 98, 27, 89, 84, 3, 6, 5, 50, 68, 70, 4, 41, 65, 89, 97, 65, 66, 38, 8, 4, 54, 36, 34, 37, 80, 38, 11, 58, 24, 96, 89, 67, 20, 48, 62, 26, 80, 53, 73, 30, 5, 55, 57, 92, 32, 33, 65, 84, 13, 100, 84, 42, 33, 37, 37, 68, 58, 99, 79, 84, 17, 68, 8, 57, 88, 42, 40, 26, 86, 79, 95, 2, 40, 78, 72, 6, 36, 8, 80, 65, 70, 12, 3, 92, 13, 28, 24, 63, 43, 57, 34, 66, 68, 51, 89, 67, 92, 84, 92, 25, 99, 28, 40, 73, 65, 63, 40, 28, 26, 49, 26, 2, 55, 59, 7, 62, 39, 99, 66, 62, 14, 36, 38, 62, 47, 12, 29, 10, 47, 70, 16, 70, 85, 14, 66, 55, 76, 10, 4, 88, 73, 3, 56, 60, 91, 35, 26, 7, 92, 72, 64, 42, 95, 84, 46, 96, 24, 80, 73, 80, 69, 73, 6, 65, 66, 27, 52, 93, 69, 76, 69, 82, 81, 6, 80, 43, 43, 50, 80, 67, 37, 50, 16, 15, 40, 55, 47, 26, 8, 2, 1, 81, 20, 29, 56, 33, 40, 52, 25, 71, 56, 99, 56, 24, 6, 33, 71, 25, 61, 51, 64, 28, 93, 10, 38, 15, 1, 36, 89, 14, 62, 33, 97, 54, 54, 73, 76, 84, 45, 96, 5, 62, 71, 73, 63, 1, 51, 25, 6, 56, 96, 76, 97, 100, 16, 100, 68, 95, 17, 67, 96, 57, 51, 29, 43, 35, 91, 60, 8, 16, 95, 95, 20, 5, 37, 39, 69, 66, 65, 39, 67, 41, 32, 51, 28, 1, 71, 4, 13, 28, 100, 35, 29, 71, 96, 57, 7, 30, 66, 62, 76, 27, 84, 53, 81, 86, 75, 32, 56, 68, 57, 10, 22, 66, 91, 85, 56, 21, 36, 22, 9, 89, 65, 97, 45, 74, 70, 76, 99, 84, 83, 14, 68, 5, 80, 16, 16, 74, 4, 39, 42, 56, 79, 48, 95, 95, 64, 81, 49, 6, 93, 75, 51, 80, 50, 39, 97, 100, 78, 75, 81, 87, 19, 68, 9, 57, 9, 28, 20, 99, 70, 7, 99, 69, 58, 23, 97, 12, 20, 10, 42, 44, 98, 94, 14, 2, 1, 80, 30, 69, 97, 70, 24, 74, 6, 54, 32, 34, 63, 10, 57, 58, 30, 53, 64, 48, 50, 3, 41, 79, 3, 57, 7, 94, 17, 9, 80, 41, 26, 83, 3, 73, 94, 12, 44, 55, 34, 56, 13, 34, 46, 84, 95, 17, 65, 5, 50, 3, 63, 74, 72, 22, 73, 44, 76, 71, 34, 40, 19, 74, 75, 94, 52, 15, 49, 81, 6, 12, 16, 43, 13, 24, 15, 57, 7, 38, 49, 65, 14, 78, 44, 16, 78, 27, 9, 53, 45, 51, 64, 42, 31, 7, 14, 58, 46, 44, 20, 44, 92, 95, 28, 86, 16, 88, 58, 33, 40, 77, 40, 30, 78, 59, 66, 79, 30, 20, 95, 32, 78, 88, 22, 87, 17, 14, 39, 4, 35, 26, 37, 2, 5, 73, 17, 10, 16, 30, 5, 38, 74, 59, 87, 79, 31, 13, 18, 72, 86, 54, 87, 48, 40, 9, 63, 61, 19, 66, 53, 91, 100, 14, 100, 68, 17, 27, 99, 37, 86, 71, 82, 6, 54, 30, 35, 94, 86, 37, 92, 44, 6, 82, 43, 31, 4, 89, 73, 42, 92, 82, 90, 64, 42, 5, 32, 94, 65, 14, 1, 60, 67, 77, 31, 4, 98, 93, 67, 48, 94, 59, 78, 44, 54, 9, 2, 84, 99, 84, 8, 100, 80, 70, 89, 55, 47, 94, 7, 37, 68, 53, 52, 69, 11, 44, 39, 64, 13, 51, 61, 36, 38, 69, 76, 38, 71, 67, 53, 70, 46, 40, 32, 40, 53, 82, 44, 83, 25, 89, 76, 48, 48, 49, 100, 70, 39, 10, 13, 72, 57, 72, 11, 23, 86, 22, 81, 71, 93, 62, 23, 39, 26, 90, 95, 76, 23, 8, 13, 88, 59, 55, 72, 77, 37, 46, 100, 44, 23, 23, 39, 58, 93, 78, 67, 32, 59, 29, 22, 80, 10, 73, 42, 97, 67, 15, 68, 4, 6, 27, 43, 44, 90, 83, 76, 91, 79, 98, 55, 30, 20, 41, 29, 84, 85, 43, 65, 41, 30, 47, 53, 20, 50, 61, 85, 40, 37, 29, 20, 17, 55, 83, 73, 25, 95, 42, 5, 7, 9, 80, 54, 38, 4, 6, 70, 81, 92, 3, 12, 76, 16, 20, 14, 67, 41, 45, 64, 27, 55, 33, 31, 76, 99, 52, 10, 92, 32, 90, 6, 72, 8, 69, 31, 6, 90, 92, 94, 33, 44, 93, 62, 64, 10, 48, 37, 88, 90, 48, 48, 5, 47, 100, 93, 6, 4, 39, 14, 18, 87, 52, 41, 53, 41, 44, 11, 8, 63, 62, 77, 61, 68, 71, 2, 78, 24, 2, 70, 67, 11, 82, 1, 59, 89, 82, 82, 76, 72, 48, 12, 42, 50, 56, 100, 12, 97, 62, 34, 75, 41, 28, 14, 19, 11, 71, 42, 36, 90, 30, 73, 94, 77, 20, 35, 79, 29, 9, 16, 98, 7, 15, 73, 82, 27, 86, 22, 49, 80, 93, 30, 84, 73, 87, 80, 85, 82, 1, 27, 73, 17, 32, 28, 20, 51, 49, 70, 77, 67, 90, 95, 95, 44, 60, 62, 19, 68, 15, 8, 42, 26, 81, 55, 28, 17, 96, 60, 74, 67, 4, 2, 36, 54, 89, 37, 74, 85, 48, 93, 29, 21, 49, 41, 48, 88, 20, 34, 31, 26, 4, 54, 68, 24, 97, 51, 48, 36, 13, 7, 18, 27, 98, 100, 47, 51, 49, 87, 66, 39, 41, 62, 28, 86, 65, 30, 94, 14, 66, 4, 46, 15, 26, 7, 23, 70, 51, 79, 48, 63, 39, 20, 50, 7, 53, 62, 26, 20, 51, 25, 38, 33, 98, 47, 98, 83, 3, 36, 61, 12, 70, 86, 7, 27, 12, 31, 82, 19, 69, 56, 99, 39, 8, 71, 86, 20, 1, 37, 18, 99, 46, 92, 95, 91, 34, 38, 85, 81, 7, 25, 25, 26, 97, 66, 25, 94, 1, 86, 100, 47, 74, 61, 85, 67, 63, 30, 29, 6, 93, 40, 11, 10, 84, 3, 50, 61, 84, 97, 86, 6, 47, 27, 31, 41, 89, 34, 96, 22, 80, 55, 74, 54, 46, 48, 4, 71, 78, 89, 96, 54, 76, 85, 80, 27, 92, 83, 5, 92, 72, 83, 59, 71, 16, 89, 47, 1, 86, 92, 67, 59, 54, 93, 61, 91, 22, 96, 55, 98, 78, 18, 36, 1, 62, 100, 19, 95, 94, 40, 26, 53, 3, 31, 73, 85, 13, 9, 37, 96, 53, 50, 51, 71, 59, 50, 74, 58, 49, 48, 89, 63, 78, 100, 65, 10, 91, 13, 43, 47, 75, 73, 71, 45, 52, 55, 46, 8, 49, 49, 12, 70, 68, 57, 81, 96, 17, 52, 74, 40, 58, 31, 29, 72, 52, 62, 46, 87, 55, 64, 17, 86, 9, 55, 80, 62, 28, 58, 8, 5, 69, 90, 37, 71, 59, 32, 15, 85, 80, 54, 56, 45, 21, 92, 56, 87, 35, 53, 64, 41, 7, 32, 81, 58, 80, 12, 84, 91, 96, 43, 53, 39, 28, 87, 76, 17, 4, 36, 72, 77, 94, 87, 12, 54, 67, 8, 68, 53, 16, 48, 28, 54, 23, 31, 21, 18, 93, 99, 81, 11, 74, 62, 63, 99, 38, 61, 7, 31, 89, 41, 62, 13, 14, 44, 36, 56, 22, 82, 96, 72, 34, 30, 72, 45, 39, 9, 26, 76, 52, 67, 74, 46, 68, 71, 28, 96, 84, 78, 42, 27, 77, 50, 9, 19, 81, 40, 69, 51, 22, 20, 31, 80, 75, 16, 30, 24, 8, 59, 81, 46, 60, 9, 86, 70, 56, 76, 59, 21, 18, 95, 56, 86, 14, 49, 73, 52, 11, 98, 75, 22, 20, 3, 8, 9, 66, 77, 44, 36, 43, 14, 3, 54, 83, 72, 28, 72, 60, 78, 86, 68, 84, 54, 91, 35, 80, 7, 73, 12, 82, 90, 90, 53, 20, 60, 23, 61, 78, 21, 59, 40, 9, 55, 62, 9, 96, 13, 56, 60, 49, 26, 33, 59, 54, 44, 78, 29, 73, 29, 96, 16, 68, 28, 47, 96, 56, 17, 15, 42, 1, 12, 37, 48, 68, 9, 54, 57, 65, 29, 29, 56, 38, 63, 62, 20, 50, 3, 79, 29, 100, 25, 53, 35, 40, 59, 68, 26, 69, 68, 62, 4, 33, 29, 93, 28, 87, 82, 91, 48, 90, 53, 7, 78, 31, 15, 10, 65, 1, 41, 84, 11, 17, 90, 17, 12, 3, 79, 72, 74, 90, 84, 56, 63, 37, 98, 26, 97, 55, 67, 40, 95, 38, 88, 55, 52, 47, 39, 78, 25, 56, 17, 91, 27, 6, 35, 71, 79, 88, 46, 49, 72, 60, 17, 17, 9, 5, 91, 15, 1, 1, 49, 86, 43, 29, 21, 47, 44, 57, 42, 93, 23, 63, 7, 6, 22, 82, 42, 69, 21, 17, 9, 43, 19, 1, 90, 99, 63, 37, 86, 40, 17, 29, 39, 94, 81, 62, 16, 3, 62, 82, 54, 71, 47, 44, 11, 31, 33, 85, 72, 58, 51, 21, 21, 80, 14, 37, 54, 59, 47, 40, 1, 70, 63, 90, 84, 60, 13, 10, 41, 33, 17, 62, 42, 98, 99, 86, 77, 63, 67, 34, 70, 1, 29, 91, 67, 51, 23, 84, 13, 67, 91, 18, 17, 50, 6, 98, 85, 78, 28, 61, 91, 30, 88, 9, 43, 58, 59, 17, 7, 56, 1, 47, 13, 67, 51, 17, 55, 44, 95, 78, 11, 92, 68, 19, 51, 79, 59, 12, 15, 48, 96, 91, 64, 54, 97, 97, 19, 68, 40, 17, 35, 93, 59, 62, 16, 66, 5, 90, 36, 17, 98, 86, 72, 76, 92, 72, 34, 90, 81, 71, 75, 55, 30, 22, 56, 12, 2, 38, 78, 96, 11, 78, 98, 99, 70, 67, 66, 22, 32, 8, 16, 99, 59, 85, 62, 3, 1, 30, 49, 10, 7, 78, 46, 92, 90, 40, 83, 31, 14, 24, 12, 82, 13, 10, 36, 96, 19, 91, 50, 32, 61, 19, 26, 79, 12, 23, 58, 64, 15, 12, 22, 41, 74, 54, 14, 82, 90, 49, 77, 27, 15, 7, 25, 18, 13, 6, 38, 100, 57, 3, 61, 82, 5, 97, 8, 60, 27, 21, 88, 6, 49, 33, 3, 6, 4, 64, 88, 10, 32, 60, 80, 15, 35, 100, 95, 95, 28, 21, 49, 28, 18, 38, 88, 32, 43, 45, 51, 11, 6, 44, 77, 7, 33, 4, 97, 89, 79, 26, 73, 46, 49, 28, 21, 61, 50, 72, 73, 59, 69, 68, 13, 47, 38, 35, 39, 76, 1, 29, 40, 66, 25, 2, 11, 60, 21, 30, 59, 66, 26, 11, 58, 5, 94, 76, 36, 83, 70, 59, 7, 74, 9, 5, 36, 16, 33, 29, 87, 63, 38, 87, 52, 81, 65, 45, 94, 100, 10, 9, 77, 92, 19, 98, 70, 43, 21, 22, 91, 22, 4, 23, 73, 81, 33, 65, 31, 16, 22, 29, 68, 42, 78, 99, 51, 35, 88, 36, 90, 1, 100, 58, 26, 15, 11, 54, 5, 99, 85, 24, 18, 71, 16, 2, 76, 39, 55, 62, 90, 96, 56, 59, 42, 31, 97, 53, 32, 83, 45, 88, 52, 23, 43, 98, 9, 37, 2, 47, 86, 31, 55}
                ;
            int B[] = 
{89, 6, 48, 3, 6, 91, 43, 64, 36, 18, 5, 17, 12, 98, 21, 58, 30, 7, 93, 47, 96, 77, 65, 87, 72, 72, 80, 1, 46, 89, 87, 3, 38, 72, 44, 66, 87, 33, 88, 43, 89, 28, 47, 91, 60, 88, 57, 19, 54, 86, 79, 87, 41, 46, 79, 33, 34, 14, 57, 64, 38, 43, 98, 89, 100, 13, 15, 68, 7, 80, 2, 30, 17, 8, 12, 17, 59, 84, 75, 43, 60, 83, 33, 69, 74, 94, 30, 70, 40, 22, 71, 59, 63, 68, 65, 11, 29, 37, 10, 20, 78, 99, 69, 63, 71, 13, 63, 94, 70, 3, 36, 54, 3, 68, 52, 14, 91, 50, 76, 87, 59, 96, 72, 31, 20, 95, 29, 46, 17, 93, 74, 23, 81, 43, 46, 86, 35, 32, 32, 83, 34, 84, 71, 3, 6, 45, 73, 75, 51, 73, 79, 45, 33, 87, 15, 64, 8, 77, 27, 1, 41, 42, 74, 64, 44, 66, 37, 56, 53, 22, 71, 57, 48, 31, 40, 52, 29, 52, 2, 44, 27, 93, 15, 89, 37, 44, 78, 50, 92, 73, 30, 93, 92, 33, 90, 59, 68, 23, 87, 55, 68, 20, 67, 75, 17, 82, 31, 90, 27, 16, 65, 44, 59, 35, 99, 3, 11, 26, 78, 37, 58, 18, 48, 90, 64, 29, 57, 40, 86, 37, 6, 100, 72, 39, 53, 32, 93, 85, 60, 41, 86, 28, 64, 54, 29, 18, 60, 12, 16, 13, 29, 35, 6, 7, 42, 43, 24, 57, 54, 81, 19, 65, 14, 65, 51, 55, 5, 21, 22, 96, 22, 12, 21, 39, 53, 14, 83, 19, 95, 62, 31, 83, 91, 94, 39, 82, 54, 15, 30, 65, 89, 32, 9, 28, 92, 83, 4, 16, 47, 39, 73, 70, 49, 64, 85, 24, 47, 89, 63, 25, 25, 57, 62, 85, 58, 45, 52, 93, 91, 38, 30, 87, 21, 15, 91, 69, 23, 19, 56, 70, 56, 24, 92, 31, 57, 16, 94, 58, 57, 78, 82, 81, 72, 32, 63, 64, 87, 4, 87, 92, 23, 49, 26, 81, 54, 37, 63, 71, 58, 76, 98, 1, 26, 90, 36, 1, 92, 40, 85, 89, 33, 70, 14, 9, 23, 80, 98, 30, 93, 98, 38, 32, 97, 65, 8, 26, 14, 98, 36, 64, 23, 13, 54, 61, 28, 30, 95, 19, 30, 55, 31, 45, 49, 99, 57, 6, 21, 45, 45, 95, 1, 59, 29, 74, 19, 49, 100, 49, 70, 24, 100, 42, 36, 2, 77, 94, 57, 54, 23, 36, 61, 16, 11, 64, 91, 56, 81, 59, 12, 90, 64, 100, 25, 68, 72, 16, 62, 61, 88, 12, 39, 38, 47, 65, 23, 49, 18, 50, 48, 83, 60, 42, 13, 7, 86, 6, 71, 66, 47, 45, 68, 71, 76, 43, 85, 37, 51, 51, 7, 84, 7, 64, 69, 74, 67, 19, 1, 27, 22, 21, 80, 40, 14, 58, 63, 65, 49, 23, 22, 83, 72, 43, 91, 47, 87, 8, 64, 63, 35, 82, 2, 75, 95, 84, 46, 78, 73, 50, 72, 89, 20, 70, 29, 25, 60, 53, 2, 44, 60, 34, 48, 2, 56, 36, 42, 48, 57, 40, 80, 36, 59, 61, 43, 40, 65, 18, 21, 41, 9, 97, 76, 26, 35, 42, 76, 33, 13, 57, 93, 35, 26, 64, 1, 22, 97, 73, 36, 9, 3, 21, 95, 39, 57, 68, 84, 41, 23, 82, 61, 94, 49, 69, 18, 80, 76, 55, 88, 17, 75, 64, 79, 25, 68, 43, 85, 10, 6, 41, 85, 94, 43, 77, 18, 18, 65, 47, 88, 62, 25, 75, 86, 11, 82, 24, 65, 90, 78, 92, 52, 54, 7, 67, 66, 53, 64, 36, 15, 42, 6, 34, 16, 59, 27, 30, 32, 11, 12, 80, 39, 15, 88, 57, 78, 37, 53, 94, 90, 89, 61, 30, 11, 81, 33, 28, 93, 16, 65, 47, 1, 26, 78, 7, 17, 50, 17, 74, 75, 36, 64, 72, 75, 51, 72, 28, 57, 56, 29, 61, 51, 80, 48, 73, 14, 44, 13, 39, 10, 54, 15, 71, 55, 26, 85, 10, 28, 12, 78, 85, 70, 38, 19, 94, 5, 24, 49, 73, 50, 100, 69, 53, 11, 73, 2, 19, 77, 97, 19, 79, 74, 34, 24, 40, 5, 64, 4, 72, 55, 64, 5, 63, 11, 30, 1, 32, 15, 19, 1, 2, 18, 79, 42, 10, 22, 45, 32, 2, 6, 89, 16, 76, 56, 82, 97, 87, 46, 46, 67, 25, 63, 14, 92, 61, 63, 37, 12, 77, 73, 78, 65, 30, 71, 69, 44, 76, 75, 82, 36, 35, 56, 81, 100, 43, 17, 80, 66, 30, 99, 83, 58, 98, 79, 32, 28, 29, 24, 23, 58, 35, 5, 66, 50, 69, 76, 78, 23, 72, 48, 91, 60, 77, 6, 99, 6, 43, 63, 17, 55, 40, 51, 12, 88, 82, 23, 19, 86, 85, 12, 3, 47, 92, 5, 10, 45, 63, 20, 14, 36, 98, 30, 26, 59, 61, 72, 49, 26, 42, 42, 2, 41, 63, 16, 38, 99, 58, 67, 100, 19, 18, 47, 62, 22, 87, 26, 42, 31, 25, 66, 27, 4, 15, 94, 73, 18, 33, 16, 3, 90, 26, 1, 54, 95, 52, 6, 87, 22, 47, 22, 18, 98, 49, 56, 28, 100, 75, 77, 98, 73, 99, 54, 21, 65, 17, 60, 7, 60, 36, 30, 82, 33, 97, 98, 16, 38, 87, 29, 51, 33, 48, 38, 85, 47, 5, 65, 20, 26, 21, 62, 88, 34, 67, 38, 77, 25, 92, 18, 33, 88, 61, 48, 87, 90, 31, 34, 70, 76, 10, 98, 34, 93, 16, 41, 27, 25, 85, 64, 79, 19, 89, 50, 10, 32, 54, 72, 69, 53, 15, 63, 38, 60, 79, 31, 70, 14, 62, 77, 16, 21, 44, 63, 32, 64, 58, 17, 12, 98, 23, 6, 72, 54, 14, 87, 62, 32, 61, 30, 18, 27, 85, 63, 14, 84, 44, 12, 85, 76, 87, 94, 82, 30, 62, 11, 96, 39, 77, 49, 26, 27, 65, 52, 32, 35, 88, 57, 68, 57, 58, 34, 78, 85, 98, 78, 64, 59, 25, 6, 76, 26, 62, 26, 95, 75, 42, 61, 22, 70, 93, 59, 66, 57, 3, 11, 7, 35, 86, 5, 46, 70, 51, 5, 9, 62, 45, 32, 48, 84, 98, 65, 2, 23, 45, 67, 40, 45, 94, 57, 66, 55, 75, 63, 88, 14, 69, 47, 89, 28, 44, 67, 91, 32, 94, 93, 98, 68, 60, 21, 64, 58, 25, 80, 95, 41, 59, 100, 74, 31, 75, 30, 67, 12, 44, 40, 6, 71, 89, 99, 64, 65, 100, 81, 61, 99, 64, 90, 36, 82, 45, 12, 36, 54, 20, 82, 10, 45, 43, 21, 98, 93, 76, 81, 18, 69, 43, 5, 79, 94, 79, 21, 26, 95, 81, 6, 53, 55, 75, 83, 8, 47, 64, 43, 74, 75, 68, 92, 46, 33, 59, 1, 59, 53, 64, 64, 95, 10, 13, 12, 68, 30, 88, 67, 60, 14, 3, 8, 50, 76, 37, 58, 11, 60, 2, 12, 70, 76, 80, 39, 35, 40, 35, 44, 33, 24, 3, 75, 60, 19, 95, 44, 41, 52, 93, 27, 53, 88, 85, 83, 97, 45, 43, 4, 38, 4, 13, 10, 58, 69, 50, 81, 9, 77, 60, 62, 45, 68, 35, 20, 83, 7, 97, 94, 32, 71, 25, 31, 75, 11, 1, 35, 66, 57, 85, 3, 1, 11, 77, 100, 51, 75, 85, 35, 63, 63, 24, 35, 49, 98, 45, 22, 34, 71, 74, 100, 54, 18, 9, 57, 100, 90, 2, 94, 27, 26, 75, 86, 41, 90, 31, 81, 72, 45, 24, 7, 64, 78, 74, 7, 78, 66, 62, 16, 13, 11, 58, 94, 66, 39, 83, 90, 25, 18, 9, 91, 47, 70, 16, 60, 18, 95, 97, 18, 86, 45, 62, 45, 28, 43, 79, 22, 63, 8, 79, 55, 65, 10, 19, 86, 92, 93, 43, 55, 4, 34, 76, 30, 41, 23, 16, 96, 17, 91, 17, 46, 84, 98, 94, 85, 74, 46, 47, 15, 77, 43, 61, 40, 50, 20, 14, 47, 80, 64, 27, 59, 55, 72, 63, 11, 95, 44, 68, 61, 73, 8, 13, 89, 85, 73, 36, 28, 32, 45, 49, 80, 52, 24, 38, 58, 59, 53, 7, 8, 76, 62, 55, 37, 59, 46, 53, 21, 1, 54, 67, 2, 40, 76, 61, 81, 17, 9, 14, 17, 84, 21, 6, 15, 13, 57, 50, 87, 98, 73, 49, 40, 15, 10, 34, 90, 68, 52, 30, 26, 41, 81, 82, 25, 34, 39, 6, 29, 50, 90, 100, 92, 93, 83, 46, 7, 76, 47, 57, 97, 25, 91, 8, 25, 97, 14, 52, 8, 4, 40, 59, 22, 77, 49, 23, 91, 90, 50, 41, 34, 77, 49, 18, 45, 24, 46, 6, 32, 75, 34, 13, 53, 20, 86, 37, 24, 9, 6, 8, 12, 85, 58, 96, 73, 75, 25, 14, 47, 93, 88, 6, 91, 30, 28, 2, 32, 93, 21, 14, 52, 12, 53, 87, 56, 47, 76, 86, 13, 5, 9, 11, 26, 34, 74, 17, 10, 30, 96, 60, 58, 6, 27, 14, 28, 67, 5, 28, 37, 24, 21, 1, 79, 60, 84, 39, 41, 94, 27, 57, 95, 58, 51, 3, 16, 93, 86, 30, 87, 44, 1, 34, 87, 32, 27, 38, 71, 95, 43, 84, 25, 97, 90, 85, 3, 81, 87, 35, 66, 88, 42, 40, 63, 13, 60, 45, 76, 90, 75, 18, 50, 48, 63, 67, 28, 4, 7, 61, 88, 69, 72, 84, 36, 46, 94, 14, 97, 24, 8, 73, 9, 52, 27, 19, 93, 79, 85, 42, 61, 58, 69, 40, 29, 79, 70, 38, 56, 78, 12, 51, 46, 59, 48, 24, 34, 1, 2, 17, 85, 36, 56, 93, 99, 6, 49, 96, 74, 5, 54, 67, 49, 41, 37, 16, 87, 61, 44, 6, 91, 86, 67, 66, 33, 29, 5, 29, 77, 47, 11, 100, 64, 8, 55, 60, 2, 82, 42, 85, 82, 98, 69, 49, 59, 12, 22, 80, 19, 14, 22, 9, 97, 88, 3, 52, 77, 73, 7, 49, 38, 79, 54, 11, 55, 94, 66, 53, 100, 62, 39, 63, 85, 84, 81, 32, 69, 11, 89, 49, 14, 45, 28, 85, 70, 39, 91, 46, 29, 1, 64, 1, 79, 16, 1, 95, 90, 13, 42, 36, 7, 78, 98, 50, 45, 67, 32, 24, 63, 53, 55, 38, 89, 41, 29, 46, 9, 63, 61, 13, 95, 74, 65, 80, 14, 31, 77, 84, 28, 58, 15, 24, 62, 15, 92, 93, 25, 19, 19, 2, 12, 84, 69, 26, 81, 19, 74, 51, 50, 68, 24, 98, 68, 81, 13, 73, 82, 41, 71, 44, 69, 99, 98, 35, 31, 80, 86, 77, 45, 95, 36, 88, 34, 62, 80, 62, 38, 88, 75, 18, 45, 72, 51, 15, 48, 79, 40, 83, 37, 23, 81, 59, 22, 50, 94, 25, 98, 82, 19, 90, 68, 95, 92, 30, 17, 85, 48, 75, 13, 42, 30, 86, 38, 13, 37, 87, 27, 12, 78, 53, 87, 88, 36, 72, 1, 20, 65, 40, 87, 87, 17, 6, 35, 26, 42, 16, 23, 51, 31, 68, 96, 25, 46, 28, 60, 85, 77, 82, 65, 29, 18, 33, 11, 81, 78, 37, 58, 37, 18, 7, 21, 44, 52, 48, 20, 69, 47, 50, 28, 29, 73, 99, 96, 23, 74, 25, 45, 87, 14, 74, 91, 36, 87, 86, 85, 23, 66, 40, 48, 3, 38, 4, 13, 8, 94, 20, 58, 62, 1, 3, 99, 7, 43, 60, 25, 5, 28, 41, 72, 55, 71, 56, 45, 60, 28, 52, 73, 10, 37, 7, 13, 75, 10, 35, 35, 6, 54, 75, 79, 29, 94, 7, 100, 94, 62, 4, 19, 33, 46, 91, 71, 23, 48, 16, 34, 92, 30, 31, 30, 12, 50, 43, 41, 43}
            ;
            int C[] = 
{}
            ;
            int __expected = 18;
            return do_test(N, to_vector(A), to_vector(B), to_vector(C), __expected, __no);
        }
        case 1: {
            int N = 4;
            int A[] = {
                1, 1, 2, 3
            };
            int B[] = {
                2, 3, 4, 4
            };
            int C[] = {
                1, 1, 1, 0
            };
            int __expected = -1;
            return do_test(N, to_vector(A), to_vector(B), to_vector(C), __expected, __no);
        }
        case 2: {
            int N = 7;
            int A[] = {
                1, 1, 2, 3, 4, 4, 5, 6
            };
            int B[] = {
                2, 3, 4, 4, 5, 6, 7, 7
            };
            int C[] = {
                1, 1, 2, 2, 3, 3, 4, 4
            };
            int __expected = 4;
            return do_test(N, to_vector(A), to_vector(B), to_vector(C), __expected, __no);
        }

        // Your custom testcase goes here
        case 3:
            break;
        default: break;
    }
    return 0;
}

int main(int argc, char *argv[]) {
    cout.setf(ios::fixed,ios::floatfield);
    cout.precision(2);
    cout << "DrivingPlans (450 Points)" << endl << endl;

    int nPassed = 0, nAll = 0;
    if (argc == 1)
        for (int i = 0; i < 3; ++i) nAll++, nPassed += run_testcase(i);
    else
        for (int i = 1; i < argc; ++i) nAll++, nPassed += run_testcase(atoi(argv[i]));
    cout << endl << "Passed : " << nPassed << "/" << nAll << " cases" << endl;

    int T = time(NULL) - 1402586969;
    double PT = T / 60.0, TT = 75.0;
    cout << "Time   : " << T / 60 << " minutes " << T % 60 << " secs" << endl;
    cout << "Score  : " << 450 * (0.3 + (0.7 * TT * TT) / (10.0 * PT * PT + TT * TT)) << " points" << endl;
    return 0;
}
// CUT end
